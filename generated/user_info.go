// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package generated

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"


type UserInfo_SidType int
const (
	UserInfo_SidType__User UserInfo_SidType = 1
	UserInfo_SidType__Group UserInfo_SidType = 2
	UserInfo_SidType__Domain UserInfo_SidType = 3
	UserInfo_SidType__Alias UserInfo_SidType = 4
	UserInfo_SidType__WellKnownGroup UserInfo_SidType = 5
	UserInfo_SidType__DeletedAccount UserInfo_SidType = 6
	UserInfo_SidType__Invalid UserInfo_SidType = 7
	UserInfo_SidType__Unknown UserInfo_SidType = 8
	UserInfo_SidType__Computer UserInfo_SidType = 9
	UserInfo_SidType__Label UserInfo_SidType = 10
	UserInfo_SidType__LogonSession UserInfo_SidType = 11
)
type UserInfo struct {
	SkipUser *AlignedU1
	SkipSid *AlignedU1
	SidType *AlignedU4
	Sid *AlignedBuffer
	Username *AlignedBstr
	_io *kaitai.Stream
	_root *UserInfo
	_parent interface{}
}
func NewUserInfo() *UserInfo {
	return &UserInfo{
	}
}

func (this *UserInfo) Read(io *kaitai.Stream, parent interface{}, root *UserInfo) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewAlignedU1()
	err = tmp1.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.SkipUser = tmp1
	if (this.SkipUser.Value == 0) {
		tmp2 := NewAlignedU1()
		err = tmp2.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.SkipSid = tmp2
	}
	if ( ((this.SkipUser.Value == 0) && (this.SkipSid.Value == 0)) ) {
		tmp3 := NewAlignedU4()
		err = tmp3.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.SidType = tmp3
	}
	if ( ((this.SkipUser.Value == 0) && (this.SkipSid.Value == 0)) ) {
		tmp4 := NewAlignedBuffer()
		err = tmp4.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.Sid = tmp4
	}
	if (this.SkipUser.Value == 0) {
		tmp5 := NewAlignedBstr()
		err = tmp5.Read(this._io, this, nil)
		if err != nil {
			return err
		}
		this.Username = tmp5
	}
	return err
}
