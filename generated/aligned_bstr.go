// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package generated

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"golang.org/x/text/encoding/unicode"
)

type AlignedBstr struct {
	ByteCount *AlignedU4
	String string
	BlockPadding []byte
	_io *kaitai.Stream
	_root *AlignedBstr
	_parent interface{}
}
func NewAlignedBstr() *AlignedBstr {
	return &AlignedBstr{
	}
}

func (this *AlignedBstr) Read(io *kaitai.Stream, parent interface{}, root *AlignedBstr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewAlignedU4()
	err = tmp1.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.ByteCount = tmp1
	tmp2, err := this._io.ReadBytes(int(this.ByteCount.Value))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	tmp3, err := kaitai.BytesToStr(tmp2, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.String = tmp3
	tmp5 := this.ByteCount.Value % 8
	if tmp5 < 0 {
		tmp5 += 8
	}
	tmp4 := (8 - tmp5) % 8
	if tmp4 < 0 {
		tmp4 += 8
	}
	tmp6, err := this._io.ReadBytes(int(tmp4))
	if err != nil {
		return err
	}
	tmp6 = tmp6
	this.BlockPadding = tmp6
	return err
}
