// SPDX-License-Identifier: MIT

package generated_test

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/GDATAAdvancedAnalytics/winreg-tasks/generated"
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
)

func TestTriggerParser(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x21, 0x41, 0x42, 0x48, 0x48, 0x48, 0x48, 0xfb, 0x1d, 0x39, 0xe9, 0x48, 0x48, 0x48, 0x48, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x77, 0x00, 0x75, 0x00, 0x61, 0x00, 0x75, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0xfc, 0x13, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x84, 0x03, 0x00, 0x00, 0x80, 0xf4, 0x03, 0x00, 0x10, 0x0e, 0x00, 0x00, 0x80, 0x51, 0x01, 0x00, 0x80, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestTimeTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x5f, 0x69, 0x07, 0x76, 0x4b, 0xd8, 0x01, 0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x21, 0x41, 0x43, 0x48, 0x48, 0x48, 0x48, 0x7f, 0x74, 0x6e, 0xc6, 0x48, 0x48, 0x48, 0x48, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x5f, 0x69, 0x07, 0x76, 0x4b, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x23, 0x33, 0x09, 0x76, 0x4b, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0xc0, 0xa8, 0x00, 0x00, 0x80, 0xf4, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x6d, 0x90, 0x0e, 0x76, 0x4b, 0xd8, 0x01, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x2d, 0x57, 0x87, 0x47, 0x6a, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x80, 0x51, 0x01, 0x00, 0x80, 0xf4, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0xa8, 0xe8, 0x16, 0x76, 0x4b, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0xc1, 0x21, 0x06, 0x08, 0x94, 0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xdd, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x6a, 0xd4, 0x22, 0x76, 0x4b, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x38, 0x00, 0x0c, 0x00, 0x22, 0x05, 0x00, 0x00, 0x00, 0x01, 0x04, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestLogonTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x80, 0xf7, 0xb8, 0x17, 0x1b, 0x4a, 0xd8, 0x01, 0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0xb9, 0x3a, 0x66, 0xa2, 0x66, 0xd9, 0x01, 0x38, 0x21, 0x41, 0x42, 0x48, 0x48, 0x48, 0x48, 0x28, 0x7e, 0xd8, 0x72, 0x48, 0x48, 0x48, 0x48, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x80, 0xf7, 0xb8, 0x17, 0x1b, 0x4a, 0xd8, 0x01, 0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0xb9, 0x3a, 0x66, 0xa2, 0x66, 0xd9, 0x01, 0x1e, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
	}

	blob = []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x10, 0x22, 0x80, 0x67, 0x10, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x10, 0x22, 0x80, 0x67, 0x10, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4a, 0x08, 0xc2, 0x03, 0x48, 0x48, 0x48, 0x48, 0xa3, 0x4c, 0x0a, 0x9b, 0x48, 0x48, 0x48, 0x48, 0x18, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x00, 0x6f, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x05, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x0c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x10, 0x22, 0x80, 0x67, 0x10, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x10, 0x22, 0x80, 0x67, 0x10, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x87, 0x00, 0x01, 0xa9, 0x9a, 0x07, 0x2c, 0xaa, 0x9a, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestBootTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x21, 0x41, 0x42, 0x48, 0x48, 0x48, 0x48, 0xc2, 0x8e, 0x2e, 0x75, 0x48, 0x48, 0x48, 0x48, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestStateChangeTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xf3, 0x4a, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xf3, 0x4a, 0xfa, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x11, 0x42, 0x42, 0x48, 0x48, 0x48, 0x48, 0x96, 0xa1, 0x16, 0x7b, 0x48, 0x48, 0x48, 0x48, 0x18, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x00, 0x6f, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x05, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x0c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xf3, 0x4a, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xf3, 0x4a, 0xfa, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x01, 0x90, 0x83, 0x25, 0x87, 0x02, 0x00, 0x00, 0x18, 0x91, 0x83, 0x25, 0x87, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x75, 0x18, 0xbc, 0xa3, 0x2b, 0x18, 0x83, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,

		0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xf3, 0x4a, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xf3, 0x4a, 0xfa, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x01, 0x9d, 0x83, 0x25, 0x87, 0x02, 0x00, 0x00, 0x18, 0x9e, 0x83, 0x25, 0x87, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x75, 0x28, 0xbc, 0xa3, 0x2b, 0x18, 0x83, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestSessionBasedTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xc7, 0x69, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xc7, 0x69, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x21, 0x41, 0x42, 0x48, 0x48, 0x48, 0x48, 0x92, 0x74, 0x3f, 0x34, 0x48, 0x48, 0x48, 0x48, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xc7, 0x69, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xc7, 0x69, 0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xa3, 0xab, 0x75, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestRegistrationTrigger(t *testing.T) {

}

func TestEventTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x21, 0x41, 0x42, 0x48, 0x48, 0x48, 0x48, 0x2f, 0xb9, 0x6e, 0x38, 0x48, 0x48, 0x48, 0x48, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x01, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0x00, 0x00, 0x00, 0xc9, 0x6b, 0x75, 0xc2, 0xed, 0xfb, 0x83, 0x8d, 0xe8, 0xbe, 0x10, 0xfe, 0xe8, 0x03, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x1a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x43, 0x00, 0x5c, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf4, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x00, 0x00, 0x00, 0x80, 0x51, 0x01, 0x00, 0x78, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x4c, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x20, 0x00, 0x49, 0x00, 0x64, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x30, 0x00, 0x22, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x4d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2d, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x75, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x7a, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x2d, 0x00, 0x41, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x2f, 0x00, 0x4f, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x22, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x4d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2d, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x75, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x7a, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x2d, 0x00, 0x41, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x2f, 0x00, 0x4f, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x22, 0x00, 0x3e, 0x00, 0x2a, 0x00, 0x5b, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x5b, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x76, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x5b, 0x00, 0x40, 0x00, 0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x3d, 0x00, 0x27, 0x00, 0x4d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2d, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x75, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x7a, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x2d, 0x00, 0x41, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x27, 0x00, 0x5d, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x20, 0x00, 0x45, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x31, 0x00, 0x32, 0x00, 0x33, 0x00, 0x34, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x4c, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x8f, 0x14, 0x29, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0xcc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x4c, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x20, 0x00, 0x49, 0x00, 0x64, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x30, 0x00, 0x22, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x4d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x44, 0x00, 0x41, 0x00, 0x47, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x63, 0x00, 0x79, 0x00, 0x45, 0x00, 0x76, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x75, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x2d, 0x00, 0x47, 0x00, 0x50, 0x00, 0x2f, 0x00, 0x4f, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x22, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x4d, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x44, 0x00, 0x41, 0x00, 0x47, 0x00, 0x2d, 0x00, 0x50, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x63, 0x00, 0x79, 0x00, 0x45, 0x00, 0x76, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x75, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x2d, 0x00, 0x47, 0x00, 0x50, 0x00, 0x2f, 0x00, 0x4f, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x22, 0x00, 0x3e, 0x00, 0x2a, 0x00, 0x5b, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x5b, 0x00, 0x28, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x3d, 0x00, 0x27, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x2d, 0x00, 0x70, 0x00, 0x63, 0x00, 0x27, 0x00, 0x29, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x20, 0x00, 0x28, 0x00, 0x4c, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x3d, 0x00, 0x31, 0x00, 0x20, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4c, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x3d, 0x00, 0x33, 0x00, 0x29, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x20, 0x00, 0x28, 0x00, 0x62, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x28, 0x00, 0x4b, 0x00, 0x65, 0x00, 0x79, 0x00, 0x77, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x64, 0x00, 0x73, 0x00, 0x2c, 0x00, 0x31, 0x00, 0x38, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x33, 0x00, 0x39, 0x00, 0x38, 0x00, 0x35, 0x00, 0x30, 0x00, 0x39, 0x00, 0x34, 0x00, 0x38, 0x00, 0x31, 0x00, 0x39, 0x00, 0x38, 0x00, 0x34, 0x00, 0x29, 0x00, 0x29, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x20, 0x00, 0x28, 0x00, 0x45, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x31, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x32, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x33, 0x00, 0x20, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x63, 0x00, 0x75, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x5b, 0x00, 0x40, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x49, 0x00, 0x44, 0x00, 0x3d, 0x00, 0x27, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x2d, 0x00, 0x35, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x31, 0x00, 0x2d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x36, 0x00, 0x32, 0x00, 0x34, 0x00, 0x37, 0x00, 0x35, 0x00, 0x32, 0x00, 0x30, 0x00, 0x39, 0x00, 0x2d, 0x00, 0x32, 0x00, 0x33, 0x00, 0x37, 0x00, 0x34, 0x00, 0x32, 0x00, 0x33, 0x00, 0x37, 0x00, 0x31, 0x00, 0x36, 0x00, 0x35, 0x00, 0x2d, 0x00, 0x34, 0x00, 0x32, 0x00, 0x36, 0x00, 0x32, 0x00, 0x35, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x27, 0x00, 0x5d, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x5b, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x66, 0x00, 0x66, 0x00, 0x28, 0x00, 0x40, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x29, 0x00, 0x20, 0x00, 0x26, 0x00, 0x6c, 0x00, 0x74, 0x00, 0x3b, 0x00, 0x3d, 0x00, 0x20, 0x00, 0x34, 0x00, 0x33, 0x00, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x51, 0x00, 0x75, 0x00, 0x65, 0x00, 0x72, 0x00, 0x79, 0x00, 0x4c, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}

func TestIdleTrigger(t *testing.T) {

}

func TestUnknownTrigger(t *testing.T) {
	blob := []byte{
		0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x85, 0xc0, 0x02, 0x48, 0x48, 0x48, 0x48, 0x97, 0xe9, 0xe3, 0x31, 0x48, 0x48, 0x48, 0x48, 0x0a, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x00, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x05, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x0c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x2c, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48,

		0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x84, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x87, 0x00, 0x01, 0x00, 0x72, 0x00, 0x79, 0x00, 0x43, 0x00, 0x6c, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x01, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,

		0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x87, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xa3, 0xab, 0x75, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x75, 0x40, 0xbc, 0xa3, 0x3e, 0x0b, 0x84, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x10, 0x22, 0xa0, 0x83, 0x10, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x87, 0x00, 0x01, 0x7e, 0xe8, 0xfa, 0xcd, 0x31, 0x1c, 0xbe, 0x6f, 0x8a, 0x99, 0x8f, 0x0c, 0x0b, 0x3e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x48, 0x75, 0xf8, 0xbc, 0xa3, 0x3e, 0x06, 0x83, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	tt := generated.NewTriggers()
	if err := tt.Read(kaitai.NewStream(bytes.NewReader(blob)), tt, tt); err != nil {
		t.Errorf("Read (%v)", err)
	}

	fmt.Printf("%v\n", tt)
}
