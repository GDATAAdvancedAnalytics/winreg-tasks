// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package generated

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"golang.org/x/text/encoding/unicode"
)

type AlignedBstrExpandSize struct {
	StringLength *AlignedU4
	Content string
	Padding []byte
	_io *kaitai.Stream
	_root *AlignedBstrExpandSize
	_parent interface{}
	_f_byteCount bool
	byteCount int
}
func NewAlignedBstrExpandSize() *AlignedBstrExpandSize {
	return &AlignedBstrExpandSize{
	}
}

func (this *AlignedBstrExpandSize) Read(io *kaitai.Stream, parent interface{}, root *AlignedBstrExpandSize) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewAlignedU4()
	err = tmp1.Read(this._io, this, nil)
	if err != nil {
		return err
	}
	this.StringLength = tmp1
	if (this.StringLength.Value > 0) {
		tmp2, err := this.ByteCount()
		if err != nil {
			return err
		}
		tmp3, err := this._io.ReadBytes(int(tmp2))
		if err != nil {
			return err
		}
		tmp3 = tmp3
		tmp4, err := kaitai.BytesToStr(tmp3, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
		if err != nil {
			return err
		}
		this.Content = tmp4
	}
	if (this.StringLength.Value > 0) {
		tmp7, err := this.ByteCount()
		if err != nil {
			return err
		}
		tmp6 := tmp7 % 8
		if tmp6 < 0 {
			tmp6 += 8
		}
		tmp5 := (8 - tmp6) % 8
		if tmp5 < 0 {
			tmp5 += 8
		}
		tmp8, err := this._io.ReadBytes(int(tmp5))
		if err != nil {
			return err
		}
		tmp8 = tmp8
		this.Padding = tmp8
	}
	return err
}
func (this *AlignedBstrExpandSize) ByteCount() (v int, err error) {
	if (this._f_byteCount) {
		return this.byteCount, nil
	}
	this.byteCount = int(((this.StringLength.Value * 2) + 2))
	this._f_byteCount = true
	return this.byteCount, nil
}
